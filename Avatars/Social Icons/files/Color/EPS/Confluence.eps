%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 48 48
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 48 48
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 24 m
0 37.254833 10.745166 48 24 48 c
37.254833 48 48 37.254833 48 24 c
48 10.745166 37.254833 0 24 0 c
10.745166 0 0 10.745166 0 24 c
h
W
0 0 48 48 rc
-5 53 m
53 53 l
53 -5 l
-5 -5 l
h
f
Q
q
12.868217 18.437645 m
12.620598 18.033834 12.342503 17.565264 12.106312 17.191931 c
11.894903 16.834675 12.008395 16.373928 12.361549 16.155739 c
17.313931 13.108121 l
17.48777 13.00079 17.697432 12.967772 17.895844 13.016479 c
18.094255 13.065187 18.264793 13.191539 18.369169 13.367168 c
18.567265 13.698597 18.822502 14.129073 19.100597 14.590025 c
21.062502 17.828121 23.035835 17.431931 26.593931 15.732882 c
31.504408 13.397644 l
31.690384 13.309125 31.904278 13.299672 32.097336 13.371442 c
32.290398 13.443212 32.446175 13.590088 32.529167 13.778597 c
34.887264 19.111931 l
35.053867 19.492842 34.884346 19.936989 34.506313 20.110025 c
33.470119 20.597645 31.409168 21.569073 29.55393 22.464312 c
22.879644 25.706215 17.207264 25.496693 12.868217 18.437645 c
h
W
0 0 48 48 rc
1 0 0 -1 12 24.48105 cm
15 dict begin
/ShadingType 2 def
/Cs1 /ColorSpace fr
/ColorSpace xd
/Coords [20.057016 11.39655 7.7710738 4.3367405] def
/Domain [0 1] def
/Extend [true true] def
15 dict begin
/FunctionType 0 def
/BitsPerSample 8 def
/Size [ 256 ] def
/Domain [ 0 1 ] def
/Range [ 0 1 0 1 0 1 0 1 ] def
/DataSource <~
!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@
!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@
!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@
!)q/B!E78C!E78C!E78C!E78C!E@AE!E@AE!`[JF!`[JF!`dSH!`dSH!`dSH"'*\I"'3eK"'3eK"'3eK
"'3eK"'<nM"BX"N"BX"N"BX"N"Ba+P"Ba+P"^'4Q"^'4Q"^'7R"^0=S"^0=S"^0=S#$KIU#$TOV#$TOV
#$TOV#$TRW#@#aY#@#aY#@#aY#@#dZ#@,j[#@,j[#[Gs\#[H!]#[Q'^#[Q'^#[Q'^$!l0_$!u9a$!u9a
$!u9a$!u9a$!u<b$=DKd$=DKd$=DKd$=DNe$=MTf$Xh]g$Xh]g$Xh`h$Xqfi$Xqfi$Xqfi$t7rk$tA#l
$tA#l$tA#l$tA&m%:e5o%:e5o%:e5o%:e8p%:e8p%:n>q%V4Gr%V4Js%V4Js%V=Pt%V=Pt%qX]!%qX]!
%qac"%qac"%qaf#%qaf#&80u%&80u%&80u%&81#&&8:)'&SU2(&SU2(&SU5)&S^;*&S^;*&S^;*&o$G,
&o$G,&o-M-&o-M-&o-P.'5HY/'5Q_0'5Q_0'5Qb1'5Qb1'5Zh2'Puq3'Put4'Put4'Q*%5'Q*%5'lE17
'lE17'lN78'lN78'lN:9'lN:9(2iC:(2rI;(2rL<(2rL<(2rL<(NA[>(NA^?(NA^?(NA^?(NJd@(NJd@
(iepB(iepB(io!C(io!C(io$D)05-E)0>3F)0>3F)0>6G)0>6G)0G<H)KbEI)KbHJ)KbHJ)KbHJ)KkNK
)g1ZM)g1ZM)g1ZM)g:`N)g:cO)g:cO*-UlP*-^rQ*-^uR*-^uR*-^uR*I./T*I.2U*I.2U*I.2U*I78V
*I7;W*dRDX*dRDX*dRDX*d[MZ*d[MZ++!V[++!V[++*\\++*_]++*_]++*_]+FNn_+FNq`+FNq`+FNq`
+FX"a+as.c+as.c+as.c+b'4d+b'7e+b'7e,(B@f,(KFg,(KIh,(KIh,(KIh,CfRi,Co[k,Co[k,Co[k
,Co[k,D#dm,_>mn,_>mn,_>mn,_H!p,_H!p-%c*q-%c*q-%l3s-%l3s-%l3s-%l3s-A;F!-A;F!-A;F!

~> def currentdict end
/Function exch def currentdict end sh
Q
q
0 0 48 48 rc
25 0 0 11 12 26 cm
BI
/Width 75
/Height 33
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
JcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDC
JcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDCJcDDC
JcDDCJ,
~> %APLeod
EI
26 0 0 3 11 23 cm
BI
/Width 78
/Height 9
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
JcD):JcD):JcD):JcD):WrEt/q>]LEs3p-1_qk?ueGlMns1d:fg?S_2qM>0[s#8j&s-q(/<hTICL]8]S
s!EF!-A;CGK`<BPr[!3r,_>k<JGUO?qD*m'9pbZhVYQ:dqTn1"rr/Ad^]-pUkPpUYs%8^Z-A;CGK`<BP
s!EF!-A;CGK`<BPs!EF!-%l1BJc$dEr$$Xe+b'50I.nb2pE+_S*dRAuGk3P>o5CT$YgE79pAUlf`W')n
l2On[s!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<?NrZm'm,CoY8J,1=:p`OtY++*Z%H1W,%
o,MuE)g:`iFRL)gmMp?:9p5"6_"R<lriQ4Ds(1ius+\/c.>IjLK`<BPs!EF!-A;CGK`<BPs!EF!-A;CG
K`<BPs!EF!-%c(@Jc$aCq]^Od+b'51IJ=n2p)eVR*dRAuGk)esnJcW?)KbEcF6sfblkaX,'lN7YFQmkF
n_!%%Zi>O
~> %APLeod
EI
25 0 0 11 11 12 cm
BI
/Width 75
/Height 33
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
cMqjjec.aos!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!,_Gt?Jc$aCq]^Od+as,-
HhJP.p)\MO*I./qGOc_snJZN<)0>3_EpOT^lPFO*'lN4MD<M[Mk7_Xm:lt"Nd.[G;`;e?eII6_-?_m]K
K`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!<9q,_Gt>JGUO?qB:=`+FNo*HhJP-
ocADN*-^rmG46Gnn/6<8)05*]EpOT]l4n4$'lN4LD!)IIjUu=h&SU29BAtOhjcR+Do(W.,s4@:#l1=pH
R/\Lds!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A2:CK)HsGr$-ah+b'50IJ4k3
pE+_S*I78sGOc_tnf)`@)KkKdF7'lblka[-(NAXSDWhgPkS.jq&o-J>C#]e=it#b\%V=N,ADS>D#2k-:
md0QDdJqr#J)p,!6^@ZuK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EBt,_Gt?
Jc$aCq]^Od+b'50I.n_0p)eVR*I./qGOc\rnJZN<)KbBaEpX]`lkXR*'lN7ND<M[MjqDOl&o-J>B]BY:
iX]Y[%V=N,@h7E)@b_?"gD+AVGGaZemebW9h>_u^mJfA5s!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!
-A;CGK`<BPs!EF!-A;CGK`<BOrZm*o,_>k;J,1=;p`P"Z+FNl(HM&>)oGr2J)g:`jFmp;lmhp36(iemY
E9e<Zl4n4#'lE+ICZZ7Ej:Q+d&8:&6B&F/1h[X06h@*lL$t7p!@G;,rfa1s:%Un")S`ehnqVD20s*r_e
s#Q8A-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!<<s,_Gt>Jc$aCq]UFa
+b'2/I.n_0ocJMQ*I./qGOc_snJZN<)KbBaEpOW_lkXO)'lN4LD<DULk7VOk&o-J>B]BY:i=BPY%V-a>
%:e6(@bhE"gBq?B$!u6j?.]Beeco=-#[>ebPN('NpZ);6s*rYas#,l:-A;CGK`<BPs!EF!-A;CGK`<BP
s!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-%l1BK)HpEq]gUe+b'50IJ4h1p)eVR*dRAuGk2ktnJZQ>
)KbEcF6sfblkaX+(2rIQDWhdNk7hap&o-J>C#]b;iXf_\%qR6J%V4E)@b_?"gC%EC$=DHm?J#Kfed#F0
#$TL[=OI=SdKEY!:PmrKg%=P/k5Tr'q>WgIs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BP
s!EF!-A;CGK`<BPs!<<s-%c(?Jbp[Bq]UFa+as,.I.n_0oc8>M*I./qGOc\qn/?E;)KY<`EpOT^lP=F(
(2i@ND<DULjq;Fi&S^8;B]BY:i=9ETh[X2R%:e3%@GD5ugBq?B$!u6i?.T<ceH]=/"^0:X=OI:PciR4n
!`dPI;p@OTfsoAun,MPMIrqpp-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BP
s!EF!-A;CEK)HsGr$-ah,(KG4Ieb+7pE+bU++!T#H1N&$nf2lD)g1WfFRBudm20j0(NA[TDWqmQkS.ms
'5Q\BC?,t@it,k^&8'l2ANAWWADRc*h$d`I$=MQo?J#QifEba6#$TL\=k!UXdf`b""'3bM<R1\EblCYc
!)h#@;Tpk;f!`lop&F:VJ$@E%-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BP
s!EF!-A;CFKDm-Ir$6jk,(KG4Ieb.8p`FkV++!T$H1W)$nf2lD)g1WgFRL)gmMU'4(NA[UDsA'TkS7st
'5Q_CC?-"Aj:Gt`&8'l3AO#)^ADRc*h$d`I$XhZq?ePfmfa(j6#@#a`>1<^Ydf`b""'3bN<R1\Ec2^ef
!)h#@;To,=bQ(Pb"BE^Nb4,3+m/MRpn,G/$s!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BP
s!EF!-A;CGK`<BPs!EF!-%c(@Jc$aCq]^Lb+b'50I.n_0p)eVR*I./qGOc_snJZQ=)KbBaEpX]`lkaX,
(2i@ODWhdNk7_Xm&o-J>B]BY:i=BNei=9DT%:e3'@bhE#gBq?B$!u6i?.T?eeco=.#$TL[=OI=Rd0!Fr
!`dPI;p>;?bQ(Pb!)h#@;To,=bQ(Pb:Pdg$s6ou;qu-OoT)U-js!EF!-A;CGK`<BPs!EF!-A;CGK`<BP
s!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!<<s,_Gt?Jc$^AqBCCa+FWu+HhJP-ocADN*I./qGOcYpn/?E;
(io!\EpOT]l5"=&'lN4MD<DRJjUu=i&S^8:BAsG67H"_fh[X2R%:e3%@G;/tgBh3>$!u6h>h0-aeHT4,
"^0:W=4%+NciR4n!E75C;To,=bQ(Pb!)h#@;To,=bQ(Pb>EIb;s6ou;MnT-;K`<BPs!EF!-A;CGK`<BP
s!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!<<s,_>k;J,1@<q&t4^+FNo*HhAG+oc8;K
*I%&nG4?Jmmhp37(io!\EU4K\l5"=&'lE.JCZZ7EjUu=h&SU29BAjA57GnYdh@4#P$tA!"@G;,rfa2!;
$!l0g>h0-aeHT1*"Ba(S<m_"MciR4n!E75C;To,=bQ(Pb!)h#@;To,=bQ(Pb[E\7:s762>`o$eDL&WKQ
s!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!<9q,_>k<JGUO?qBCCa
+FNo*HhJP-oc8;K*I./pG4?Jnmi$<:)0>0^EpOT]l4n4$'lE.KCuuCHjqDLk&S^8:BAjA57c=hgh[X2R
$tA$#@G;/tg'V3?$!u6h>h0*_eHT4,"Ba(T=4%+Nd/m=o!E75C;To,=bQ(Pb!)h#@;To,=bQ(Pb-Z.B4
pAagcJ,0$B7$[d!K`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BO
rZm*o,_>k<JGUO>q&t1]+FNo*HM&>*oc8;K*-^rmG46Dlmi$98(iemYE9e9Yl4n4$'lE.KCuuCHjUl4e
&SU29B1UtlB&F/0h@3uN$tA!"@+krqg'M*<#[Q$e>h0*_e-9()"^'1U=4%(LcN7(k!)q,B;To,=bQ(Pb
!)h#@;To,=bQ(PbQauGTs7QDAP/7/FK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BP
s!EF!-A;CGK`<BOr[!3r,_>k<JGUO>q&t1]+FX#,HhAG+oc8;K*I.,oG4?Jmmi$<9(io!\EU4H[l5"='
'lE.KD!)IIjUu:g&S^8:BAjA58Djtgh[X2R$tA!"@G;,sg'M*=$!l0g>h0-aeHK+)"^'1T=4%+NciR4n
!E75C;To,=bQ(Pb!)h#@;To,=bQ(Pb&ms#Yq>L!dq#>j%mf+hos!EF!-A;CGK`<BPs!EF!-A;CGK`<BP
s!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-%l1BK)HsGr$-^f,(KD3IJ=q4pE"YR*dRAuGk2ktnJcW?
)KbEcF7'lcm2'a-(2rIQDWhgPkS%dp'5Q\AC#]e=iX]Wli=BMX%V4H*@bhH%g^@QF$=DKn?J#Nged#F1
#$TL[=jmLUdKEY!!`dPJ<6bJAbQ(Pb!)h#@;To,=bQ(Pb!)h#@;TsE_jmrHHs*o'ms!EF!-A;CGK`<BP
s!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CFKDm-Ir$-ah,(B>2IJ=q4pE+bU
++!T#Gk2o!nf2iC*-^liF7'odm2'd.(NAXTDs8!SkS.jq&o-M@C?,q>iXfb]%q\Ak%V4H+A).Q&h$[ZG
$=DKn?J,Tif*>R3#@#^_>1<[WdK<Ot"'3bL<6bMCblCYc!)h#@;To,=bQ(Pb!)h#@;To;Fc/nBio)JLb
In?%--A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CFKDm-Ir$-ah
,CfP5Ieb.8p`OtY*d[K#H1X%Oop3Dhal!$jqu?-YrlsBuX3C?p[e++&n2uEk'5Q_CC?-"Aj:Q(b%qa`1
AOYJdAD[f)h$dcJ$Xh]q?J,Tif*G[6#@#^_>1<^XdKE\#"'3bN<R1_Gc2^bd!)h#@;To,=bQ(Pb!)h#@
;To,=bZp:fn,N1_;K8l>-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!
-A;CFKDm-Ir$-ah,(B>2IJ=q4pE+_S."LuR^A@U$jo8B/iqdPgmi-0+%qac2B&F/0h@3uN$tA!"@+u#q
g'V3?#[Q$e>h0-aeHK+)"^'1T<m^tKcN7(k!)q,B;To,=bQ(Pb!)h#@;To,=bQ(Pb!)h%chY$@;q#=(Z
q#=Bfs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-A;CGK`<?Mr?Qsl,CoY8J,(7:
q&t1]++*]5KD*XOrS%9Gnb2sJ]^dh*j:5_W$tA$$@GD5ug'M*<$!l-g>h0*_eHT4,"^0:W=4%+Nci[:o
!E75C;To,=bQ(Pb!)h#@;To,=bQ(Pb!)h$)IG*uep&@P]s8T%Cs##f9-A;CGK`<BPs!EF!-A;CGK`<BP
s!EF!-A;CGK`<BPs!EF!-%l1CK)HpEq]gXg,(KG3IJ=q4pFh3ne)gPRs$XTOp0!UB%:e0#?eG`lfa(m8
#@#^`>L`m[df`e$"BWtP<R1_Gc2^bd!)h#@;To,=bQ(Pb!)h#@;To,=bQ(PbYK?8"s6otOmIgL&Z2Z/(
s!EF!-A;CGK`<BPs!EF!-A;CGK`<BPs!EF!-%l1CKDm-Ir$-ah,(KD3IJ=q5pE=tZb2E6;s#o*!qIZ5\
%Un#q>h0-aeHT4,"^0:W=4%+NciR4n!E75C;To,=bQ(Pb!)h#@;To,=bQ(Pb!)h#cC=E.\li65L29FhW
8XTN)K`<BPs!EF!-A;CGK`<BPs!EF!-A;CFKDm-Ir$-ah,(KG4IeY(7p`OtYMRrYss#&j(qf8Fo%q*rl
=jmLTdK<Os!`dPJ<6bJAbQ(Pb!)h#@;To,=bQ(Pb!)h#@;To,=b`]F"l2ToG1&CkKQc/nVM>noUs!EF!
-A;CGK`<BPs!<<s-%l1BJc$aCq]^Od+b'2/I.p@$q"t#ts"E^/r-bO-'4KAm<mUnIc2^ef!)h#@;To,=
bQ(Pb!)h#@;To,=bQ(Pb%pdNQp\j@Vi;Y7dnGd'us!EF!-A;CGK`<BPs!<<s,_Gt>JGUO?qB:=`+FNo0
J,%d`riQ2Io(N$;Y3?d5dfECl!)h#@;To,=bQ(Pb!)h#@;To,=bQ(PbFJ7dXs4[Jq\_$jEP5ck^s!<<s
-%l1AJGURAqBCFc+as,.I.rB*qP=-6p\FfP[d"oHdK!1h!)h#@;To,=bQ(Pb!)h#D<R'Lgq<%_/ruC\,
s+\,b.#%[HJc$aCq]^Od+as,/IJ>aXp\"?QrtkP0rh.$m-uRN7;To,=bQ(Pb!)h$JPMbF#dJjp3kl4SO
r$-ah,(B>2IJ=n3p9W3FQ2_Hprr9(?mm)?T->_18OP]g1ro=%%rsP^JrDoHb4H9-@dJSRqir=T0T`9TC
T`9TCT`9N
~> %APLeod
EI
Q
q
35.073929 30.540501 m
35.321548 30.944311 35.599644 31.412882 35.835835 31.786215 c
36.047245 32.143471 35.93375 32.604218 35.580597 32.822407 c
30.628216 35.870026 l
30.452959 35.988068 30.236551 36.028023 30.030697 35.980354 c
29.824842 35.932682 29.648029 35.801662 29.542501 35.618595 c
29.344406 35.287167 29.089169 34.856693 28.811073 34.395741 c
26.849169 31.157644 24.875835 31.553835 21.317739 33.252884 c
16.422503 35.576691 l
16.236525 35.665211 16.022633 35.674664 15.829572 35.602894 c
15.636511 35.531124 15.480733 35.384247 15.39774 35.19574 c
13.039645 29.862406 l
12.873042 29.481493 13.042563 29.037346 13.420597 28.864311 c
14.456788 28.376692 16.51774 27.405264 18.372978 26.510025 c
25.062502 23.271931 30.734882 23.489073 35.073929 30.540501 c
h
W
0 0 48 48 rc
1 0 0 -1 12.975617 36 cm
15 dict begin
/ShadingType 2 def
/Cs1 /ColorSpace fr
/ColorSpace xd
/Coords [1579.2316 -18637.324 1393.421 -18850.566] def
/Domain [0 1] def
/Extend [true true] def
15 dict begin
/FunctionType 0 def
/BitsPerSample 8 def
/Size [ 256 ] def
/Domain [ 0 1 ] def
/Range [ 0 1 0 1 0 1 0 1 ] def
/DataSource <~
!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@
!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@
!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@!)h&@
!)q/B!E78C!E78C!E78C!E78C!E@AE!E@AE!`[JF!`[JF!`dSH!`dSH!`dSH"'*\I"'3eK"'3eK"'3eK
"'3eK"'<nM"BX"N"BX"N"BX"N"Ba+P"Ba+P"^'4Q"^'4Q"^'7R"^0=S"^0=S"^0=S#$KIU#$TOV#$TOV
#$TOV#$TRW#@#aY#@#aY#@#aY#@#dZ#@,j[#@,j[#[Gs\#[H!]#[Q'^#[Q'^#[Q'^$!l0_$!u9a$!u9a
$!u9a$!u9a$!u<b$=DKd$=DKd$=DKd$=DNe$=MTf$Xh]g$Xh]g$Xh`h$Xqfi$Xqfi$Xqfi$t7rk$tA#l
$tA#l$tA#l$tA&m%:e5o%:e5o%:e5o%:e8p%:e8p%:n>q%V4Gr%V4Js%V4Js%V=Pt%V=Pt%qX]!%qX]!
%qac"%qac"%qaf#%qaf#&80u%&80u%&80u%&81#&&8:)'&SU2(&SU2(&SU5)&S^;*&S^;*&S^;*&o$G,
&o$G,&o-M-&o-M-&o-P.'5HY/'5Q_0'5Q_0'5Qb1'5Qb1'5Zh2'Puq3'Put4'Put4'Q*%5'Q*%5'lE17
'lE17'lN78'lN78'lN:9'lN:9(2iC:(2rI;(2rL<(2rL<(2rL<(NA[>(NA^?(NA^?(NA^?(NJd@(NJd@
(iepB(iepB(io!C(io!C(io$D)05-E)0>3F)0>3F)0>6G)0>6G)0G<H)KbEI)KbHJ)KbHJ)KbHJ)KkNK
)g1ZM)g1ZM)g1ZM)g:`N)g:cO)g:cO*-UlP*-^rQ*-^uR*-^uR*-^uR*I./T*I.2U*I.2U*I.2U*I78V
*I7;W*dRDX*dRDX*dRDX*d[MZ*d[MZ++!V[++!V[++*\\++*_]++*_]++*_]+FNn_+FNq`+FNq`+FNq`
+FX"a+as.c+as.c+as.c+b'4d+b'7e+b'7e,(B@f,(KFg,(KIh,(KIh,(KIh,CfRi,Co[k,Co[k,Co[k
,Co[k,D#dm,_>mn,_>mn,_>mn,_H!p,_H!p-%c*q-%c*q-%l3s-%l3s-%l3s-%l3s-A;F!-A;F!-A;F!

~> def currentdict end
/Function exch def currentdict end sh
ep
end
%%Trailer
%%EOF
