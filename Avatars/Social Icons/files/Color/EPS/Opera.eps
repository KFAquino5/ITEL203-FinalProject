%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 48 48
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 48 48
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
24 0 m
37.254833 0 48 10.745165 48 24 c
48 37.254833 37.254833 48 24 48 c
10.745165 48 0 37.254833 0 24 c
0 10.745165 10.745165 0 24 0 c
h
W
0 0 48 48 rc
-5 53 m
53 53 l
53 -5 l
-5 -5 l
h
f
Q
q
23.971485 35.821781 m
17.377426 35.821781 12.033267 30.475248 12.033267 23.881187 c
12.033267 17.477228 17.075644 12.251882 23.405941 11.954851 c
23.596039 11.945347 23.783762 11.940594 23.973862 11.940594 c
27.03208 11.940594 29.819407 13.090693 31.931881 14.979802 c
30.532278 14.050694 28.89505 13.518415 27.146139 13.518415 c
24.301783 13.518415 21.756832 14.929901 20.043564 17.15406 c
18.722376 18.710495 17.86693 21.015446 17.8099 23.600792 c
17.8099 23.607922 17.8099 24.156832 17.8099 24.16396 c
17.86693 26.746931 18.722376 29.051882 20.041187 30.610693 c
21.754456 32.83485 24.301783 34.243961 27.146139 34.243961 c
28.89505 34.243961 30.532278 33.709309 31.931881 32.780197 c
29.828911 34.662178 27.058218 35.809902 24.016634 35.821781 c
24.002377 35.821781 23.985743 35.821781 23.971485 35.821781 c
h
W
0 0 48 48 rc
1 0 0 -1 12.033267 35.821781 cm
15 dict begin
/ShadingType 2 def
/Cs1 /ColorSpace fr
/ColorSpace xd
/Coords [9.9480743 0.38959032 9.9480743 23.533333] def
/Domain [0 1] def
/Extend [true true] def
15 dict begin
/FunctionType 0 def
/BitsPerSample 8 def
/Size [ 256 ] def
/Domain [ 0 1 ] def
/Range [ 0 1 0 1 0 1 0 1 ] def
/DataSource <~
ru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qi
ru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qi
ru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qi
ru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qi
ru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qi
ru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qi
ru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qi
ru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qi
ru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qi
ru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3Qiru3QirYmHhr>I6er#.-d
q\h$cqALpbq&(^_p_bU^p_bU^pD>F\p)#:Zob]1YoGB(Xo+rnVneWbTnJ<YSn/!PRn.mJQmhR>OmM75N
m1h&LlkLrKlP1fIl4k]HknGNFkS,EEkS,BDk7f9CjqB*AjV'!@j:`j>it<[<iY!R;i=[I:i=[F9i"777
h[q.6h@V%5h%:n3g^k_1gCPV0g(5M/faf;,faf;,fFK2+f+0)*ed`l'eIEc&e.*Z%dgdQ$dL@?!d1%5u
d1%5ucjV&scO:oqc3tfpbmY]obR5Nmb6oBkapT9japT9jaU0*ha9isf`sNje`X3ad`<dRb`!IF`_[.=_
_?_.]_?_.]_$D"[^^(nZ^BY_X^'>VW]a#JU]E]AT]*92R\cs)Q\cs&P\HNlN\-3cM[fmZL[KRNJ[0.?H
Zih6GZNM-FZNM*EZ3(pCYlbgBYQG^AY6#L>Xo]C=XTB:<X9'1;WrWt8WrWt8WW<k7W<!b6VuRP3VZ7G2

~> def currentdict end
/Function exch def currentdict end sh
Q
q
0 0 48 48 rc
20 0 0 1 12 35 cm
BI
/Width 60
/Height 3
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
U]2>1qu>d@s38sk[_2X4VuNEfs0fT?bg?CLjT##NaT&RG3q)V=XL%q>F8n[-s"-G7*%q71/cQbAru3Qi
)_M(//cQbAru3Qi)_M(//cR:^s$9K]G_?%._#O-%fDiJ_9]P77S>?0cA,dW*ru3Qi)_M(//cQbAru3Qi
)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(61]LWks.#nbhVmDmJ,
~> %APLeod
EI
24 0 0 22 12 13 cm
BI
/Width 72
/Height 66
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
`;a'?rVrass$fuf)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(/
/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cSj]s2W@#s2Y.M]"e81:]D@cru3Qi)_M(//cQbAru3Qi)_M(/
/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbA
ru3Qi<b)0MbfKh/s)?61s&!/')_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbA
ru3Qi)_M(//cQbAru3Qi*\dUQ8,lLrs)<>bMj47?YQ)5Ms.-"dH\VQ&AcFVVru<Zk)_M(//cSg[s2iO2
s3q!>k32hVEW6t0ru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi
)_M(31&k["s1,lDqtoCQ'DM8$e_'o-\Gp;eruWuqJrKa,qpbYss$P#Ws"H_<)_M(//cQbAru3Qi)_M(/
/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cS(3s-TJZlg;ss$K'kCFb'Kj@K5ENfDjP(
4fYad+Ys':/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cRq+s2E-p
rs.]Ms,WQI_T1C1hu>t@rr7S/ru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(/
/cQbAru3Qi*%q8>L]@,C[JpBtn,MeCh>cL74nA4E?#'BY/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbA
ru3Qi)_M(//cQbAru3Qi)_M(//cRe$s2N6:s5j8Dq>1+d>lP`pru3Qi)_M(//cQbAru3Qi)_M(//cQbA
ru3Qi)_M(//cQbAru3Qi)_M(//cQbAs)<Acp%F%<jo78YI/b-;ru3Qi)_M(//cQbAru3Qi)_M(//cQbA
ru3Qi)_M(//cQbAru3Qi)_M(//cQbAs)`aAs8Du]s#QRAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi
)_M(//cQbAru3Qi)_M(//cQbAru3QiCNogXrdk+Js6K\G^;Ksk0E2tCru3Qi)_M(//cQbAru3Qi)_M(/
/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cT6ss8;eGs8)c`s#Srms!^#/)_M(//cQbAru3Qi)_M(//cQbA
ru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi=_@^0qLS\@s7-+MqtpCX:B)7bru3Qi)_M(//cQbAru3Qi
)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cRt-s7Z/;s7H?]s#6UKru3Qi)_M(//cQbAru3Qi)_M(/
/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAruNloc-_+Bnc/7]2tcnE00oOV/cQbAru3Qi)_M(//cQbA
ru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M)HPC`c%s7H=MN0XD^/cQbAru3Qi)_M(//cQbAru3Qi
)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M([<r`'oJcG0<p]!2;m/J@jru3Qi)_M(//cQbAru3Qi)_M(/
/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAs2iN:s6K^Zs"ntQru3Qi)_M(//cQbAru3Qi)_M(//cQbA
ru3Qi)_M(//cQbAru3Qi)_M(//cQbAs%?LGs60LZs#9*(ruWuq)_M(//cQbAru3Qi)_M(//cQbAru3Qi
)_M(//cQbAru3Qi)_M(//cQbAru3QiZFGJckl:MZ2kR#J)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(/
/cQbAru3Qi)_M(//cQbAru3Qi2b3oHrIP"4s8)aP=CqLO/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbA
ru3Qi)_M(//cQbAru3Qi)_M)XTn37*s8DsVnac]&1B/:Fru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi
)_M(//cQbAru3Qi)_M(//cX_fJcFj3rVn^X[Jq0tru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(/
/cQbAru3Qi)_M(//cR^uJcFa0rVn]eF8m12ru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbA
ru3Qi)_M(//cTm@JcFa03</jPs!Kf+)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(/
/cQbAru3QiYI/r]ir;"<d+&(7/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi
)_M(//cY/(JcFa02?15$ru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbA
s"$9`s53i6s.ZLm)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi6;`=6
hu>S6MNn,[/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(mAqC!>s#'gu
J,^H>ru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cTd:JcFX-2?-rsru3Qi
)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAs+c\es53i6s$fuf)_M(//cQbA
ru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3QiR\GB5hu>S63(X&g/cQbAru3Qi)_M(/
/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M)\V1J[(s#'gM>5oNnru3Qi)_M(//cQbAru3Qi
)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cV-.JcFX-2?.-(ru3Qi)_M(//cQbAru3Qi)_M(//cQbA
ru3Qi)_M(//cQbAru3Qi)_M(//cQbAs+#uXs53i6s*01r)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(/
/cQbAru3Qi)_M(//cQbAru3QiBm#",hu>S6O-oqd/cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi
)_M(//cQbAru3Qi)_M(f@"J@8s#'hQXT'4kru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbA
ru3Qi)_M(//cRq+JcFX-2?1>*ru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(/
/cQbAs!0LRs53i9s4cE1)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi)_M(//cQbAru3Qi
)_M*Dh1>Ucs8DsS3(X#f/c?S=rYmHf)D(h*/H$J<r>I6c)D(h*/H-S?r>I6d)_M%./cH\@rYmHg)_M)\
V1J[+s8N$UrHsCt)D(_'/Gg>:qALp])D(_'/G^89qALp])D(_&/,C/8qACg[)(YP%/G^57qALp_@;USq
irB#X3;p\5pD>CS)(YFu.eaf2pDGLU(b57t/,'l1pD>CS)(YFu.eaf2pDGLU(b57t/,'l1pa%iurV_<I
jo>;Z2u<CD,;o*0.eFN,oG9"L(Fo%o.eFN,oGB(M(b5.p.eFQ-oGB(M(b5.p.eFQ-oGB(M(b5L/d=M>Z
s82gRp1/.4(Fekj.Ie3'nJ<YE(Fekj.Ie3'nJ<YD(+Jbi.I\*%n.mJB(+AYf.I\*$n.mGHHA-qMjo>5X
3;KSYm1h&;(+APb..%`tm1h&:'e&Ga..%`tm1q,;'e&Gb..%cum1q,;(+APc..%cumiaIcnF;)0kl:MZ
2u!+7/3W84-gDEol4k]3'IW/\-gDBnl4bW3'dr8\-gMKplP1f4'IW2]-gDBnl4bW2'IWU9R=YD%s7lUR
oq&&D'IMrU-KYsgk7f9*'.2lV-Kc'ik7]3*'IMuV-Kc$hk7f9+'.2lV-Kc'ik7f9./3Nt/qLS\4s7cOP
qtoP36f\n,j:`j#'.2cR-0,^dj:`m$'.2cR-KGgej:`m#&gcTP-K>^bit<Zu&gcQN-2"%6JcG'9p&@#E
WNb:m,iB7[i"76m&L?9H,iB7[i"76m&L?9H,iB7[i=[Eo&L?<J,iK@]i"@<o&gZK^2#QP$JcG0<o`$lL
ro6%2h%:pg&L6*D,i'%Wh%:mf&L?0E,M`qWh%:pg&0p!C,i'"Vh%1ge&0p!B,M`nUk>Pf?s6fpXs#BYX
]%RZ=g(5L_%jK^=,ME\Rfaf:\&0oj=,2!JNg(5I]%jK^=,2*SPg(5L_&0fg>,ME\Rn=?A+s7--Xs#B.T
Fk7-Jed`kT%jKU9,1d>Lf+0(W%jKU9,1[5If+0(V%O'C5+kI5Ked`kT%jKU9,1m_^q:=5Ms7H?[s#^5T
q:n/.e.*YN%3X+/+O^cBdg[GK%3X+/+OglEdg[GL%O'=3+k$oEe.*YN%O':2+k-uFfHiHOh;Ekap]'U[
48S"!e0$Nn$m3h)+4(H>cjV#C%3X",+OCQ?cj_,E%3X",+OCN=cj_,E$m3h)+4(H>cjV#I.QdLfk(3R/
s69PFo>/Gl%jK7,+3b39bmY]=$m3_&+3Y*6bmY]<$QdM"*mG*8bR5K:$m3_&+3b39bmY]=$m4"R5l9g2
JcG]Kk5RO+OdaB!*Qea2aU0'2$QdFu*m+j3apT95$QdFu*m"a1apT94$6I:r*m+j3aU0*3$QdFu*n)u7
r9j'*rrE)Zs#]4kMoH&D`X3a+#p%"l*QAF,`X*[*$6@+n*QJL-`X3a,$6@.o*QAC+`sNj,#p%"l*QJL-
cRh?PaNT;:i;Z")TVo^:+N"L*_[.=##TU_g*5`%%_[%7"#TU_f*5`%%_[%7"#ophg*5`(&_[.=##ophh
*5i4+hg1"Uq>#mIh>]\,]u%]'.DQ3/^^(mp#TUVc)o)^u^^(mp#TLPb)o)^u^^(mp#TLPb)o)^u^BY^n
#TLM`)nuUsb:l6Qc-a!""n9IPqWmP)s4[K=o[ML2,;m+<)S?7m]ET:e"rb,Y)S?7m]ET:e"rb,Y)S?7m
]ET:e"rb/[)S?7m]a#Ih#9(8\)nub%gNS8DhVlHR$i^)%kG502CNoR8kM#sfs$ukHkfcV"\HWq^"rXrU
)7g"i\HWq_"rXuV)7g"j\cs%`"rb&W)S$%i\cs(`"rXrU)7]ng\HWq^"W=lU)U(WKk+o*Wp@d#9%fQ1t
j-cUY-oft1M#[GPfDj7u:$Agi^a1nI";nQM(q'Pa[KIGU";nQM(q'Pa[KIGU";nQM(q'Pa[KIGU";nQN
)7BYb[KRPW"W=`O(q'Sc]+QF>Bm&^L]^s_-rV#sRrtkY0q=E.ikc_GNLm$1sE4m5D]c/Qi]YW"qcMqn_
q"WTtO1#NAZNM,O";eBI(UF5]ZNM)N";nHJ(pa>]ZNM,O";eBI(UF5]ZNM)N";nHJ(pX5[ZNM,N!uJ6F
(UF5\Z3(oL";eWe/&O>;bu\H(CNmln>.c+=Zj%GS!uJ6F(UF5\\JQjPMNdu2p!3TYs(1rck0$tBYQPfH
!Z&!B(9[cTYQGZF!uA'A(9dlVY6#KC!Z%sA(9[cTY6,QD!uA*C(U!oVYQG]G!uJ0D(9dlWYQGZF!uA'A
(9dlVY6#KC!Z&!B(U!lUYQG]N(b=<uPl14IaT$b
~> %APLeod
EI
20 0 0 2 12 11 cm
BI
/Width 60
/Height 6
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
_Z*d5kNU`^R(bIJX8s'<!Z%j<'s%ENX9'0=!>V[;(9@QQX9'-<!Z%j='s%HOXTB9>!Yqg=(9IWRX9'0>
!Z%j=(9@QQXTB9>!Z%m>(9IWR\0NrcMj=55p#c:bs$u\8hUR.6[O4&6!>VU8'r_3KWW<j7!>VR7'rh9L
W<!a5!>VR6'WD*JW;mX3!#2C4'WD'HW;mX3!#2L?*5P'Cg5q`ng"bE`Yl?TOg"b\o\Ccb+b@bn16;b$/
0;nmdVZ7F/!#2=2'W1pFXUl_b-ont*:W?IIcZ=QsZFTo*p!j#5rsnu#p[d1tn^Z=ci8ae1pqQi[s3:Rp
s3:Ro
~> %APLeod
EI
Q
q
20.041187 30.610693 m
21.139009 31.903366 22.552872 32.682774 24.099802 32.682774 c
27.576237 32.682774 30.394455 28.740595 30.394455 23.881187 c
30.394455 19.019405 27.576237 15.079604 24.099802 15.079604 c
22.552872 15.079604 21.139009 15.85901 20.043564 17.151684 c
21.756832 14.927525 24.301783 13.51604 27.146139 13.51604 c
28.89505 13.51604 30.532278 14.050694 31.931881 14.977426 c
34.374653 17.165941 35.912079 20.34297 35.912079 23.881187 c
35.912079 27.41703 34.374653 30.596436 31.929504 32.782574 c
30.529902 33.711681 28.89505 34.243961 27.146139 34.243961 c
24.301783 34.243961 21.756832 32.832474 20.043564 30.608316 c
W
0 0 48 48 rc
1 0 0 -1 20.041187 34.243961 cm
15 dict begin
/ShadingType 2 def
/Cs1 /ColorSpace fr
/ColorSpace xd
/Coords [7.9362416 0.17587011 7.9362416 20.645378] def
/Domain [0 1] def
/Extend [true true] def
15 dict begin
/FunctionType 0 def
/BitsPerSample 8 def
/Size [ 256 ] def
/Domain [ 0 1 ] def
/Range [ 0 1 0 1 0 1 0 1 ] def
/DataSource <~
S,`QhSH&ZiSH/ckScJllScSunT)o)oT*#2qTE>;rTE>;rT`bMuU'(W!U'1`#UBLi$UBLi$U]q&'U]q&'
V$@8*V$@8*V?dJ-V[*S.V[*S.W!Ne1W!Ne1W<s"4W<s"4WXB47WXB47Ws]=8X:,O;X:,O;XUPa>XUPa>
Xpkj?XptsAY7;'BY7D0DYR_9EYn.KHYn.KHZ4ITIZ4R]KZOmfLZP!oNZk=#OZk=#O[1a5R[M'>S[M0GU
[hKPV[hTYX\.obY\.obY\J>t\\J>t\\ec1_],):`],2Cb]GMLc]GMLc]bq^f]bq^f^)@pi^)@pi^D\$j
^De-l^`+6m_&OHp_&OHp_AsZs_AsZs_]9ct_]Bm!`#^!"`#g*$`?-3%`ZQE(`ZQE(`ulN)`uuW+a<;`,
a<Di.aW_r/aW_r/as//2b9J83b9SA5bTnJ6bU"S8bp=\9bp=\9c6an<c6an<cR1+?cmL4@cmL4@d3pFC
d3pFCdO?XFdO?XFdjcjIdjcjIe1)sJeLN0MeLN0MegrBPegrBPf.ATSf.ATSfI\]TfIefVfe+oWg+P,Z
g+P,ZgFk5[gFt>]gb:G^gbCP`h(^Yah(gbchD-kdh_Hteh_R(gi%m1hi&!:jiA<CkiAELmi\`Uni\`Un
j#/gqj>Jprj>T$tjYo-ujYo-uju>@#ju>@#k;bR&k;bR&kW1d)krLm*krLm*l8q*-l8q*-lT@<0lT@<0
lodN3lodN3m6*W4mQNi7mQNi7mls&:mls&:n39/;n3B8=nN]A>nNfJ@nj,SAo0PeDo0PeDoKknEoKu"G
og;+HogD4Jp-_=Kp-_=KpI.ONpdIXOpdRaQq*mjRq+!sTqF='UqF='Uqaa9Xqaa9Xr(0K[rCKT\rCT]^
r^of_r^of_s%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#b
s%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#b
s%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#b
s%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#b
s%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#bs%?#b

~> def currentdict end
/Function exch def currentdict end sh
ep
end
%%Trailer
%%EOF
